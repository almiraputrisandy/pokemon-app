{"ast":null,"code":"var _jsxFileName = \"/Users/almiraputrisandy/Desktop/GitHub Repositories/test-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { useQuery, gql } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: \"https://graphql-pokeapi.vercel.app/api/graphql\",\n  cache: new InMemoryCache()\n});\nconst pokemons = gql`\nquery pokemons($limit: Int, $offset: Int) {\n  pokemons(limit: $limit, offset: $offset) {\n    count\n    next\n    previous\n    status\n    message\n    results {\n      url\n      name\n      image\n    }\n  }\n}\n`; // client.query({\n//   query: pokemons})\n// .then(result => console.log(result));\n\nfunction Pokemons() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(pokemons);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 21\n  }, this);\n  return data.pokemons.results.map(({\n    name,\n    image\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [image, \": \", name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this));\n}\n\n_s(Pokemons, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Pokemons;\n\nfunction App() {\n  return (\n    /*#__PURE__*/\n    // <ApolloProvider client={client}>\n    // </ApolloProvider>\n    _jsxDEV(Pokemons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Pokemons\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/almiraputrisandy/Desktop/GitHub Repositories/test-app/src/App.js"],"names":["ApolloClient","InMemoryCache","useQuery","gql","ApolloProvider","client","uri","cache","pokemons","Pokemons","loading","error","data","results","map","name","image","App"],"mappings":";;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,OAAO,WAAP;;AAEA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,GAAG,EAAE,gDADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIN,aAAJ;AAFuB,CAAjB,CAAf;AAKA,MAAMO,QAAQ,GAAGL,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfA,C,CAiBA;AACA;AACA;;AAEA,SAASM,QAAT,GAAoB;AAAA;;AAClB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BV,QAAQ,CAACM,QAAD,CAAzC;AAEA,MAAIE,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,SAAOC,IAAI,CAACJ,QAAL,CAAcK,OAAd,CAAsBC,GAAtB,CAA0B,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,kBAC/B;AAAA,2BACE;AAAA,iBACGA,KADH,QACYD,IADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,KAAUA,IAAV;AAAA;AAAA;AAAA;AAAA,UADK,CAAP;AAOD;;GAbQN,Q;UAC0BP,Q;;;KAD1BO,Q;;AAeT,SAASQ,GAAT,GAAe;AACb;AAAA;AACE;AAEA;AACA,YAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAJF;AAMD;;MAPQA,G;AAST,eAAeA,GAAf","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { useQuery, gql } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: \"https://graphql-pokeapi.vercel.app/api/graphql\",\n  cache: new InMemoryCache()\n});\n\nconst pokemons = gql`\nquery pokemons($limit: Int, $offset: Int) {\n  pokemons(limit: $limit, offset: $offset) {\n    count\n    next\n    previous\n    status\n    message\n    results {\n      url\n      name\n      image\n    }\n  }\n}\n`;\n\n// client.query({\n//   query: pokemons})\n// .then(result => console.log(result));\n\nfunction Pokemons() {\n  const { loading, error, data } = useQuery(pokemons);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return data.pokemons.results.map(({ name, image }) => (\n    <div key={name}>\n      <p>\n        {image}: {name}\n      </p>\n    </div>\n  ));\n}\n\nfunction App() {\n  return (\n    // <ApolloProvider client={client}>\n      \n    // </ApolloProvider>\n    <Pokemons/>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}