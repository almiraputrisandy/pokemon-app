{"ast":null,"code":"var _jsxFileName = \"/Users/almiraputrisandy/Desktop/GitHub Repositories/test-app/src/App.js\";\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { useQuery, gql } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client';\nimport Pokemons from './pokemonList';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: \"https://graphql-pokeapi.vercel.app/api/graphql\",\n  cache: new InMemoryCache()\n}); // const pokemons = gql`\n// query pokemons($limit: Int, $offset: Int) {\n//   pokemons(limit: $limit, offset: $offset) {\n//     count\n//     next\n//     previous\n//     status\n//     message\n//     results {\n//       url\n//       name\n//       image\n//     }\n//   }\n// }\n// `;\n// function Pokemons() {\n//   const { loading, error, data } = useQuery(pokemons);\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>Error :(</p>;\n//   return data.pokemons.results.map(({ name, image }) => (\n//     <div key={name}>\n//       <p>{name}\n//         <img src={image} alt=\"pokemon\"></img> \n//       </p>\n//     </div>\n//   ));\n// }\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(Pokemons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/almiraputrisandy/Desktop/GitHub Repositories/test-app/src/App.js"],"names":["ApolloClient","InMemoryCache","useQuery","gql","ApolloProvider","Pokemons","client","uri","cache","App"],"mappings":";AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAO,WAAP;;AAEA,MAAMC,MAAM,GAAG,IAAIN,YAAJ,CAAiB;AAC9BO,EAAAA,GAAG,EAAE,gDADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIP,aAAJ;AAFuB,CAAjB,CAAf,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASQ,GAAT,GAAe;AACb,sBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEH,MAAxB;AAAA,2BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;KANQG,G;AAQT,eAAeA,GAAf","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { useQuery, gql } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client';\nimport Pokemons from './pokemonList';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: \"https://graphql-pokeapi.vercel.app/api/graphql\",\n  cache: new InMemoryCache()\n});\n\n// const pokemons = gql`\n// query pokemons($limit: Int, $offset: Int) {\n//   pokemons(limit: $limit, offset: $offset) {\n//     count\n//     next\n//     previous\n//     status\n//     message\n//     results {\n//       url\n//       name\n//       image\n//     }\n//   }\n// }\n// `;\n\n// function Pokemons() {\n//   const { loading, error, data } = useQuery(pokemons);\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>Error :(</p>;\n\n//   return data.pokemons.results.map(({ name, image }) => (\n//     <div key={name}>\n//       <p>{name}\n//         <img src={image} alt=\"pokemon\"></img> \n//       </p>\n//     </div>\n//   ));\n// }\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Pokemons/>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}