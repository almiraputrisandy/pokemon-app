{"version":3,"sources":["graphql/graphqlScript.js","components/PokemonDetails.js","components/Pokemon.js","components/Pokemons.js","components/MyPokemons.js","App.js","reportWebVitals.js","index.js"],"names":["GET_POKEMONS","gql","GET_POKEMON_DETAILS","caughtPokemons","CatchPokemon","pokemon","n","chance","Math","floor","random","pokemonsList","JSON","parse","window","localStorage","getItem","existingNicknames","map","p","push","nickname","alert","promptNickname","prompt","includes","setItem","stringify","PokemonDetails","details","ownedTotal","props","style","textAlign","padding","paddingTop","src","pDetails","image","alt","name","types","t","type","moves","m","move","Button","variant","onClick","bind","this","Pokemon","useLazyQuery","variables","getDetails","loading","error","data","id","filter","length","Pokemons","useQuery","Container","marginTop","Row","marginBottom","pokemons","results","currentPokemon","Col","xs","md","Card","url","MyPokemons","useState","myPokemonsList","setList","ReleasePokemon","index","confirm","splice","mp","client","ApolloClient","uri","cache","InMemoryCache","App","active","setActive","Navbar","fixed","bg","expand","Toggle","aria-controls","Collapse","Nav","className","flex","Item","Link","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b58f92dd.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const GET_POKEMONS = gql`\n    query pokemons($limit: Int, $offset: Int) {\n        pokemons(limit: $limit, offset: $offset) {\n            count\n            next\n            previous\n            status\n            message\n            results {\n                url\n                name\n                image\n            }\n        }\n    }\n`;\n\nexport const GET_POKEMON_DETAILS = gql`\n    query pokemon($name: String!) {\n      pokemon(name: $name) {\n        id\n        name\n        abilities {\n          ability {\n            name\n          }\n        }\n        moves {\n          move {\n            name\n          }\n        }\n        types {\n          type {\n            name\n          }\n        }\n        message\n        status\n      }\n    }\n`;","import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nvar caughtPokemons = []; //Initialise empty list of caught pokemons\n\nfunction Probability(n){ //Random number generator\n    return Math.floor(Math.random() * Math.floor(n));\n};\n\nfunction CatchPokemon(pokemon){ //Catch Pokemon function\n    var chance = Probability(2); //Generate random number between 0 and 1 for the 50% chance of catching a pokemon\n    var pokemonsList = JSON.parse(window.localStorage.getItem(\"myPokemons\")); //Get list of caught pokemon\n    var existingNicknames = [];\n    pokemonsList.map(p => existingNicknames.push(p.nickname)); //Get all existing nicknames and put in an array\n\n    if(chance==0){ //If Probability returns 0, pokemon is not caught \n        return alert(\"Oops, better luck next time!\");\n    } else{\n        var promptNickname = prompt(\"Congratulations! You caught the Pokemon!\\nGive it a nickname: \");\n        if (promptNickname!=null && promptNickname!=\"\"){\n            if(existingNicknames.includes(promptNickname)){ //Check if nickname is already used\n                alert(\"Nickname already used, please use another nickname\");\n            }else{\n                pokemon.nickname = promptNickname; //Add nickname given by user to the pokemon info provided by API\n\n                if(pokemonsList != null){ //Check if there is already an existing list of caught pokemons\n                    pokemonsList.push(pokemon); //Add the newly caught pokemon to the list\n                    window.localStorage.setItem('myPokemons', JSON.stringify(pokemonsList)); //Update list\n                }else{\n                    caughtPokemons.push(pokemon);\n                    window.localStorage.setItem('myPokemons', JSON.stringify(caughtPokemons));\n                }\n            } \n        }\n    }\n};\n\nfunction PokemonDetails(props){ //Component\n    return(\n        <div style={{ textAlign: 'center', padding: '3%', paddingTop: '0'}}>\n            <h1>Pokemon Details</h1>\n            <img src={props.pDetails.image} alt={props.pDetails.name}/>\n            <p>Name: {props.pDetails.name}</p>\n            <p>Types: {props.pDetails.types.map((t) => {\n                return(\n                    <span key={t.type.name}>{t.type.name}, </span>\n                );\n            })}</p>\n            <p>Moves: {props.pDetails.moves.map((m) => {\n                return(\n                    <span key={m.move.name}>{m.move.name}, </span>\n                );\n            })}</p>\n            <Button variant=\"primary\" onClick={CatchPokemon.bind(this, props.pDetails)}>Catch Pokemon</Button>\n        </div>\n    );\n};\n\nexport default PokemonDetails;","import React from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport { GET_POKEMON_DETAILS } from '../graphql/graphqlScript';\nimport { Button } from 'react-bootstrap';\nimport PokemonDetails from './PokemonDetails';\n\nvar details, ownedTotal;\n\nfunction Pokemon(props){\n    //Lazy Query to execute only after \"See Pokemon Details\" button is clicked\n    const [getDetails, { loading, error, data }] = useLazyQuery(GET_POKEMON_DETAILS, {variables:{\"name\":props.pokemon.name}});\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n    if (data){\n        details = JSON.parse(JSON.stringify(data.pokemon));\n        details.image = props.pokemon.image;\n        return(\n            <PokemonDetails pDetails={details} key={details.id}/>\n        );\n    }\n\n    var pokemonsList = JSON.parse(window.localStorage.getItem(\"myPokemons\")); //Get list of caught pokemon\n    if (pokemonsList!=null){\n        ownedTotal = pokemonsList.filter(n => n.name === props.pokemon.name).length; //Count total of owned pokemons\n    }else{\n        ownedTotal = 0;\n    }\n    \n\n    return(\n        <div key={props.pokemon.name} style={{ textAlign: 'center', padding: '3%', paddingTop: '0'}}>\n            <h1>\n                {props.pokemon.name} \n            </h1>\n            <p>\n                Owned Total: {ownedTotal}\n                <br/>\n                <img src={props.pokemon.image} alt=\"pokemon\"></img>\n            </p>\n            <Button variant=\"primary\" onClick={() => getDetails()}>See Pokemon Details</Button>\n        </div>\n    );\n};\nexport default Pokemon;","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport  Pokemon  from './Pokemon';\nimport { GET_POKEMONS } from '../graphql/graphqlScript';\nimport { Container, Row, Col, Card } from 'react-bootstrap';\n\nfunction Pokemons() {\n  const { loading, error, data } = useQuery(GET_POKEMONS); //Execute get pokemons list\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <div>\n      <Container style={{ marginTop: '5%' }}>\n        <Row style={{ marginBottom: '5%' }}>\n          {data.pokemons.results.map((currentPokemon) => ( //For every pokemon in the list\n            <Col xs=\"12\" md=\"6\" style={{ padding: '2%' }} key={currentPokemon.url}>\n              <Card>\n                <Pokemon pokemon={currentPokemon}/> {/*Show Pokemon object*/}\n              </Card>\n            </Col>\n          ))}\n        </Row>\n      </Container>\n      \n    </div>\n  );\n\n}\n\nexport default Pokemons;","import React, {useState} from 'react';\nimport { Button, Container, Row, Col, Card } from 'react-bootstrap';\n\nfunction MyPokemons(){\n    var [myPokemonsList, setList] = useState([]);\n    //Get list of caught Pokemons\n    myPokemonsList = JSON.parse(window.localStorage.getItem(\"myPokemons\"));\n\n    function ReleasePokemon(index){\n        var confirm = window.confirm(\"Are you sure you want to release this Pokemon?\");\n        if(confirm){\n            myPokemonsList.splice(index, 1); //Remove selected pokemon\n            setList(myPokemonsList => [...myPokemonsList]); //Refresh content\n            window.localStorage.setItem(\"myPokemons\", JSON.stringify(myPokemonsList));\n        }\n    }\n\n    if(myPokemonsList!=null){\n        if (myPokemonsList.length!=0){ //If list is not empty return list\n            return(\n                <div>\n                    <Container style={{marginTop: '5%'}}>\n                        <Row style={{marginBottom: '5%'}}>\n                            {myPokemonsList.map((mp, index) => (\n                                <Col xs=\"12\" md=\"6\" style={{padding: '2%'}} key={mp.nickname}>\n                                    <Card>\n                                        <div style={{ textAlign: 'center', padding: '3%', paddingTop: '0'}}>\n                                            <h1>{mp.name}</h1>\n                                            <img src={mp.image} alt={mp.name}/>\n                                            <p>Nickname: {mp.nickname}</p>\n                                            <Button variant=\"primary\" onClick={ReleasePokemon.bind(this, index)}>Release Pokemon</Button>\n                                        </div>\n                                    </Card>\n                                </Col>\n                            ))}\n                        </Row>\n                    </Container>\n                </div>\n            );\n        }\n    }\n\n    return (\n        <div>\n            <Container style={{marginTop: '5%'}}>\n                <Row style={{marginBottom: '5%'}}>\n                    <Col xs=\"12\" md=\"12\" style={{padding: '2%', textAlign: 'center'}}>\n                        <p>No pokemons caught yet:(</p>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n};\n\nexport default MyPokemons;","import React, { useState } from 'react';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport Pokemons from './components/Pokemons';\nimport MyPokemons from './components/MyPokemons';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nconst client = new ApolloClient({\n  uri: \"https://graphql-pokeapi.vercel.app/api/graphql\",\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  const [active, setActive] = useState(\"pokeList\");\n\n  return (\n    <ApolloProvider client={client}>\n      <Navbar fixed=\"top\" bg=\"light\" expand=\"lg\">\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"justify-content-center\" style={{ flex: 1}}>\n            <Nav.Item>\n              <Nav.Link href=\"#\" onClick={function(){\n                setActive(\"pokeList\")\n              }}>Pokemon List</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link href=\"#\" onClick={function(){\n                setActive(\"myPokemons\")\n              }}>My Pokemons</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <div>\n        {active === \"pokeList\" && <Pokemons/>}\n        {active === \"myPokemons\" && <MyPokemons/>}\n      </div>\n      \n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}